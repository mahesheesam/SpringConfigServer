
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.dao.DataAccessException;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.BulkOperations;
import org.springframework.data.mongodb.core.BulkWriteResult;
import org.springframework.transaction.TransactionException;
import org.springframework.retry.annotation.Retryable;
import java.util.List;

class ClientAccountsMongoRepoCustomImplTest {

    @Mock
    private MongoTemplate mongoTemplate;

    @Mock
    private BulkOperations bulkOperations;

    @Mock
    private BulkWriteResult bulkWriteResult;

    @InjectMocks
    private ClientAccountsMongoRepoCustomImpl clientAccountsMongoRepoCustomImpl;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testSaveAllInBulk_Success() {
        // Arrange
        List<Account> accounts = List.of(new Account("account1"), new Account("account2"));
        when(mongoTemplate.bulkOps(any(), eq(Account.class))).thenReturn(bulkOperations);
        when(bulkOperations.insert(accounts)).thenReturn(bulkOperations);
        when(bulkOperations.execute()).thenReturn(bulkWriteResult);

        // Act
        BulkWriteResult result = clientAccountsMongoRepoCustomImpl.saveAllInBulk(accounts);

        // Assert
        assertNotNull(result);
        verify(mongoTemplate, times(1)).bulkOps(any(), eq(Account.class));
        verify(bulkOperations, times(1)).insert(accounts);
        verify(bulkOperations, times(1)).execute();
    }

    @Test
    void testSaveAllInBulk_NoAccounts() {
        // Arrange
        List<Account> accounts = List.of();

        // Act
        BulkWriteResult result = clientAccountsMongoRepoCustomImpl.saveAllInBulk(accounts);

        // Assert
        assertNull(result);
        verify(mongoTemplate, never()).bulkOps(any(), eq(Account.class));
    }

    @Test
    void testSaveAllInBulk_DataAccessException_Retry() {
        // Arrange
        List<Account> accounts = List.of(new Account("account1"));
        when(mongoTemplate.bulkOps(any(), eq(Account.class))).thenReturn(bulkOperations);
        when(bulkOperations.insert(accounts)).thenReturn(bulkOperations);
        when(bulkOperations.execute()).thenThrow(new DataAccessException("Bulk insert failed") {});

        // Act & Assert
        assertThrows(DataAccessException.class, () -> clientAccountsMongoRepoCustomImpl.saveAllInBulk(accounts));

        // Verify retry logic, should attempt 5 times
        verify(bulkOperations, times(5)).execute();
    }

    @Test
    void testSaveAllInBulk_TransactionRollback() {
        // Arrange
        List<Account> accounts = List.of(new Account("account1"));
        when(mongoTemplate.bulkOps(any(), eq(Account.class))).thenReturn(bulkOperations);
        when(bulkOperations.insert(accounts)).thenReturn(bulkOperations);
        when(bulkOperations.execute()).thenThrow(new TransactionException("Transaction failed"));

        // Act & Assert
        assertThrows(TransactionException.class, () -> clientAccountsMongoRepoCustomImpl.saveAllInBulk(accounts));

        // Transaction should not retry, only one attempt
        verify(bulkOperations, times(1)).execute();
    }
}
