        List<String> finalList = objects.stream()
            .flatMap(obj -> obj.getStrings().stream())
            .distinct()
            .collect(Collectors.toList());


boolean hasMoreEnabled = featureFlagsConfig.getIsAccountsHasMoreEnabled();

if (CollectionUtils.isNotEmpty(accounts.getAccountNumbersList())) {
    processAccounts(accounts.getAccountNumbersList(), hasMoreEnabled, paymentAuthorizationAccounts::setAccountNumbersList, paymentAuthorizationAccounts::setHasMore);
}

if (CollectionUtils.isNotEmpty(accounts.getExternalAccounts())) {
    processAccounts(accounts.getExternalAccounts(), hasMoreEnabled, paymentAuthorizationAccounts::setExternalAccounts, paymentAuthorizationAccounts::setHasMoreExternalAccounts);
}

private <T> void processAccounts(
    List<T> accounts,
    boolean hasMoreEnabled,
    Consumer<List<T>> setAccounts,
    Consumer<Boolean> setHasMore
) {
    List<T> accountsToSet = accounts.stream().limit(DEFAULT_ACCOUNTS_LIMIT).collect(Collectors.toList());
    setAccounts.accept(accountsToSet);

    if (hasMoreEnabled && accounts.size() > DEFAULT_ACCOUNTS_LIMIT) {
        setHasMore.accept(true);
    }
}
