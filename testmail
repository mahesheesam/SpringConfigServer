import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.util.CollectionUtils;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class YourServiceTest {

    @Mock
    private ClientAccountsMongoRepo clientAccountsMongoRepo;

    @Mock
    private DbUtility dbUtility;

    @Mock
    private BridgeClient bridgeClient;

    @InjectMocks
    private YourService yourService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testInsertClientAccounts_emptyInputList() {
        List<AccountsInsert> accountsInsertList = Collections.emptyList();
        yourService.insertClientAccounts(accountsInsertList);

        verify(clientAccountsMongoRepo, never()).saveAll(anyList());
        verify(dbUtility, never()).fetchAccountsByAccountNumbers(anyString(), anyString(), anyList());
    }

    @Test
    void testInsertClientAccounts_existingAccountNumbers() {
        AccountsInsert accountsInsert = new AccountsInsert();
        accountsInsert.setCorpHubId("123");
        accountsInsert.setUniquePrefKey("abc");
        accountsInsert.setAccountNumberList(Arrays.asList("acc1", "acc2"));

        when(dbUtility.fetchAccountsByAccountNumbers(eq("123"), eq("abc"), anyList()))
            .thenReturn(Arrays.asList("acc1")); // simulate acc1 exists in DB

        yourService.insertClientAccounts(Arrays.asList(accountsInsert));

        // Verify that only acc2 is inserted
        verify(clientAccountsMongoRepo, times(1)).saveAll(anyList());
    }

    @Test
    void testInsertClientAccounts_noExistingAccounts() {
        AccountsInsert accountsInsert = new AccountsInsert();
        accountsInsert.setCorpHubId("123");
        accountsInsert.setUniquePrefKey("abc");
        accountsInsert.setAccountNumberList(Arrays.asList("acc1", "acc2"));

        when(dbUtility.fetchAccountsByAccountNumbers(eq("123"), eq("abc"), anyList()))
            .thenReturn(Collections.emptyList()); // simulate no accounts exist in DB

        yourService.insertClientAccounts(Arrays.asList(accountsInsert));

        // Verify that both acc1 and acc2 are inserted
        verify(clientAccountsMongoRepo, times(1)).saveAll(anyList());
    }

    @Test
    void testInsertClientAccounts_withBridgeClient() {
        AccountsInsert accountsInsert = new AccountsInsert();
        accountsInsert.setCorpHubId("123");
        accountsInsert.setUniquePrefKey("abc");
        accountsInsert.setAccountTypes(Arrays.asList("type1", "type2"));
        accountsInsert.setAccountNumberList(Arrays.asList("acc1"));

        ClientAccount clientAccount = new ClientAccount();
        clientAccount.setAccountNumber("acc1");
        clientAccount.setAccountType("type1");

        when(dbUtility.fetchAccountsByAccountNumbers(eq("123"), eq("abc"), anyList()))
            .thenReturn(Collections.emptyList()); // simulate no accounts exist in DB

        when(bridgeClient.getClientAccounts(anySet()))
            .thenReturn(Map.of("123", Arrays.asList(clientAccount))); // simulate fetching accounts from bridge client

        yourService.insertClientAccounts(Arrays.asList(accountsInsert));

        // Verify that the account from bridgeClient is inserted
        verify(clientAccountsMongoRepo, times(1)).saveAll(anyList());
    }
}
